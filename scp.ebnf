/* SCP 语言 EBNF 风格语法定义 */

/* 一、基础语法结构 */
<程序>         = <声明列表> ;
<声明列表>     = (<声明> ";"?)* ;
<声明>         = <变量声明> | <函数声明> | <类声明> | <枚举声明> | <结构体声明> | <模块导入> | <对象声明> ;

/* 二、关键字系统 */
<硬关键字>     = "class" | "enum" | "struct" | "obj" | "if" | "else" | "when" | "match" 
                | "for" | "while" | "do" | "break" | "continue" | "return" | "yield"
                | "try" | "catch" | "finally" | "throw" | "is" | "!is" | "as" | "as?"
                | "true" | "false" | "null" | "in" | "!in" | "this" | "super"
                | "fun" | "operator" ;

<软关键字>     = "annotation" | "sealed" | "data" | "companion" | "where"
                | "async" | "await" | "by" | "macro" | "unsafe" | "actual"
                | "crate" | "use" | "mod" | "package" | "dynamic" | "unsized" | "type" ;

<修饰符关键字> = "open" | "final" | "impl" | "val" | "var" | "const" | "lateinit"
                | "pub" | "priv" | "prot" | "inter" | "override" | "tailrec" | "crossinline" ;

/* 三、词法单元定义 */
<标识符>       = [a-zA-Z_][a-zA-Z0-9_]* ;
<整数字面量>   = [0-9]+ ("i8" | "i16" | "i32" | "i64" | "i128" | "u8" | "u16" | "u32" | "u64" | "u128")? ;
<浮点字面量>   = ([0-9]* "." [0-9]+ | [0-9]+ ".") ("f32" | "f64" | "f128")? ;
<字符串字面量> = "\"" ([^"\\] | "\\" [ntrbf\\"])* "\"" ;
<布尔字面量>   = "true" | "false" ;
<字符字面量>   = "'" [^'\\] "'" | "'" "\\" [ntrbf\\'] "'" ;

/* 四、运算符系统 */
<数学运算符>   = "+" | "-" | "*" | "/" | "%" ;
<复合赋值符>   = "+=" | "-=" | "*=" | "/=" | "%=" ;
<自增自减符>   = "++" | "--" ;
<逻辑运算符>   = "&&" | "||" | "!" ;
<相等比较符>   = "==" | "!=" | "===" | "!==" ;
<大小比较符>   = "<" | ">" | "<=" | ">=" ;
<位运算符>     = "&" | "|" | "^" | "~" ;
<位赋值符>     = "&=" | "|=" | "^=" | "<<=" | ">>=" ;
<位移运算符>   = "<<" | ">>" ;
<空安全符>     = "?." | "?:" | "!!" ;
<区间操作符>   = ".." | "..<" | "..=" ;
<指针操作符>   = "&" | "*" ;
<访问操作符>   = "::" | "." | "?" ;
<基础操作符>   = "=" | "->" | "=>" ;
<辅助符号>     = "@" | ":" | ";" | "$" | "_" ;

/* 五、类型系统 */
<类型>         = <基本类型> | <复合类型> | <泛型类型> | <可空类型> | <动态类型> | <特殊类型> ;

<基本类型>     = "i8" | "i16" | "i32" | "i64" | "i128"
                | "u8" | "u16" | "u32" | "u64" | "u128"
                | "f32" | "f64" | "f128" | "bool" | "char" ;

<复合类型>     = <元组类型> | <数组类型> | <切片类型> | <字符串类型> ;
<元组类型>     = "(" (<类型> ("," <类型>)*)? ")" ;
<数组类型>     = "[" <类型> ";" <整数字面量> "]" ;
<切片类型>     = "slice" "(" <类型> ")" ;
<字符串类型>   = "str" ;

<动态类型>     = "int" | "flo" | "str" | "obj" ;

<特殊类型>     = <单元类型> | <不可达类型> | <空值类型> ;
<单元类型>     = "()" ;
<不可达类型>   = "never" ;
<空值类型>     = "null" ;

<泛型类型>     = <标识符> "<" <类型参数列表> ">" ;
<类型参数列表> = <类型> ("," <类型>)* ;
<可空类型>     = <类型> "?" ;

/* 六、变量与常量声明 */
<变量声明>     = ("var" | "val" | "const" | "lateinit") <标识符> (":" <类型>)? ("=" <表达式>)? ";"? ;

/* 七、表达式语法 */
<表达式>       = <条件表达式> ;
<条件表达式>   = <逻辑或表达式> ("if" "(" <表达式> ")" <表达式> ("else" <表达式>)?)? ;
<逻辑或表达式> = <逻辑与表达式> ("||" <逻辑与表达式>)* ;
<逻辑与表达式> = <相等表达式> ("&&" <相等表达式>)* ;
<相等表达式>   = <关系表达式> (("==" | "!=" | "===" | "!==") <关系表达式>)* ;
<关系表达式>   = <加减表达式> (("<" | ">" | "<=" | ">=") <加减表达式>)* ;
<加减表达式>   = <乘除表达式> (("+" | "-") <乘除表达式>)* ;
<乘除表达式>   = <一元表达式> (("*" | "/" | "%") <一元表达式>)* ;
<一元表达式>   = ("+" | "-" | "!" | "~" | "++" | "--")? <后缀表达式> ;
<后缀表达式>   = <主表达式> (<成员访问> | <函数调用> | <数组访问> | "++" | "--")* ;

<主表达式>     = <字面量> | <标识符> | <括号表达式> | "this" | "super" 
                | <类型转换表达式> | <when表达式> ;

<字面量>       = <整数字面量> | <浮点字面量> | <字符串字面量> | <布尔字面量> | <字符字面量> | "null" ;
<括号表达式>   = "(" <表达式> ")" ;
<成员访问>     = "." <标识符> | "::" <标识符> | "?." <标识符> ;
<函数调用>     = "(" <参数列表>? ")" ;
<数组访问>     = "[" <表达式> "]" ;
<类型转换表达式> = <表达式> ("as" | "as?") <类型> ;

/* 八、控制流语法 */
<when表达式>   = "when" "(" <表达式> ")" "{" <when分支>* "}" ;
<when分支>     = (<表达式> ("," <表达式>)* | "else") "->" <表达式> ";"? ;

<if语句>       = "if" "(" <表达式> ")" <语句> ("else" <语句>)? ;
<for语句>      = "for" "(" <标识符> "in" <表达式> ")" <语句> ;
<while语句>    = "while" "(" <表达式> ")" <语句> ;
<do语句>       = "do" <语句> "while" "(" <表达式> ")" ";"? ;
<try语句>      = "try" <语句> ("catch" "(" <标识符> ":" <类型> ")" <语句>)* ("finally" <语句>)? ;

<语句>         = <表达式> ";"? | <变量声明> | <if语句> | <for语句> | <while语句> 
                | <do语句> | <try语句> | "break" ";"? | "continue" ";"? 
                | "return" <表达式>? ";"? | "yield" <表达式> ";"? ;

/* 九、函数与泛型编程 */
<参数列表>     = <表达式> ("," <表达式>)* ;
<函数声明>     = ("async" | "tailrec")? "fun" <标识符> <泛型参数列表>? "(" <参数定义列表>? ")" (":" <类型>)? <函数体> ;
<泛型参数列表> = "<" <类型参数> ("," <类型参数>)* ">" ;
<类型参数>     = <标识符> ("where" <类型约束>)? ;
<类型约束>     = <标识符> ":" <类型> ("," <类型>)* ;
<参数定义列表> = <参数定义> ("," <参数定义>)* ;
<参数定义>     = <标识符> ":" <类型> ("=" <表达式>)? ;
<函数体>       = "{" <语句>* "}" | "->" <表达式> ;

/* 十、面向对象编程 */
<类声明>       = ("open" | "sealed" | "data")? "class" <标识符> <泛型参数列表>? (":" <接口列表>)? <类体> ;
<枚举声明>     = "enum" <标识符> <泛型参数列表>? <枚举体> ;
<结构体声明>   = "struct" <标识符> <泛型参数列表>? <结构体体> ;
<对象声明>     = "obj" <标识符>? <类体> ;

<接口列表>     = <标识符> ("," <标识符>)* ;
<类体>         = "{" <类成员>* "}" ;
<类成员>       = <变量声明> | <函数声明> | <构造函数> | <伴生对象声明> ;
<构造函数>     = "init" "(" <参数定义列表>? ")" <函数体>? ;
<伴生对象声明> = "companion" "object" <标识符>? <类体> ;

<枚举体>       = "{" <枚举成员> ("," <枚举成员>)* "}" ;
<枚举成员>     = <标识符> ("(" <参数列表>? ")")? ;

<结构体体>     = "{" <结构体成员>* "}" ;
<结构体成员>   = <标识符> ":" <类型> ";"? ;

/* 十一、模块与互操作性 */
<模块导入>     = "use" <模块路径> ("as" <标识符>)? ";"? ;
<模块路径>     = <标识符> ("::" <标识符>)* ;

<跨语言调用>   = "extern" "[" <语言标记> "]" "fun" <标识符> "(" <参数定义列表>? ")" (":" <类型>)? ;
<语言标记>     = "C" | "Rust" | "Python" | "JS" ;

/* 十二、并发与异步 */
<异步函数>     = "async" <函数声明> ;
<协程调用>     = "await" <表达式> ;
<并发模型声明> = "conc" "." ("model_process" | "model_thread" | "model_fiber" | "model_hybrid") "()" ;

/* 十三、注释与空白 */
<行注释>       = "//" [^\r\n]* ;
<块注释>       = "/*" .*? "*/" ;
<空白字符>     = [ \t\r\n]+ ;